0 - 1 Knapsack Problem......    T.C -> O(N*W)   S.C -> O(N*W)


TABULAR i.e. -->  TOP DOWN APPROACH....

class Solution
{
    public:
    
    //Function to return max value that can be put in knapsack of capacity W.

    // n is size of array

    int knapSack(int W, int wt[], int val[], int n) 
    { 
        int dp[n+1][W+1];
        memset(dp, -1, sizeof(dp));
        for(int i = 0 ; i<= n; i++)
        {
            for(int j = 0 ;j<=W ; j++)
            {
                if(i == 0 || j == 0)
                    dp[i][j] = 0;
                else if(wt[i-1] <= j )
                {
                    dp[i][j] = max(val[i-1] + dp[i-1][j-wt[i-1]], dp[i-1][j]);
                }
                else 
                    dp[i][j] = dp[i-1][j];
            }
        }
        
        return dp[n][W];
        
       
    }
};
