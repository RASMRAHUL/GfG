1.  ZigZag Tree Traversal

vector <int> zigZagTraversal(Node* root)
    {
    	vector<int> result ;
    	if(root== NULL)
    	    return result;
    	queue<Node*> q;
    	q.push(root);
    	bool leftToright = true;
    	
    	while(!q.empty())
    	{
    	    int size = q.size();
    	    vector<int> ans(size);
    	    for(int i = 0; i<size;i++)
    	    {
    	        Node* frontNode = q.front();
    	        q.pop();
    	        
    	        int index = leftToright ? i:size-i-1;
    	        ans[index] = frontNode->data;
    	        
    	        if(frontNode->left){
    	            q.push(frontNode->left);
    	        }
    	        if(frontNode->right){
    	            q.push(frontNode->right);
    	        }
    	    }
    	   
    	   leftToright = !leftToright;
    	   for(auto i : ans)
    	   result.push_back(i);
    	    
            
       
    	}
    	
    	return result;
    }




2.  Boundary Traversal of binary tree


class Solution {
    private:
    void traverseLeft(Node* root, vector<int> &ans)
    {
        if((root == NULL) || (root->left == NULL && root->right == NULL))
            return;
        ans.push_back(root->data);
        
        if(root->left)
            traverseLeft(root->left, ans);
        else
            traverseLeft(root->right, ans);
    }
    
    void traverseLeaf(Node* root, vector<int> &ans)
    {
        if(root == NULL)
            return;
            
        if(root->left == NULL && root->right == NULL)
        {
            ans.push_back(root->data);
            return;
        }
        
        traverseLeaf(root->left, ans);
        traverseLeaf(root->right, ans);
        
    }
    
    void traverseRight(Node* root, vector<int> &ans)
    {
        if((root == NULL) || (root->left == NULL && root->right == NULL))
            return;
        
        if(root->right)
            traverseRight(root->right, ans);
        else
            traverseRight(root->left, ans);
            
        ans.push_back(root->data);
    }
public:
    vector <int> boundary(Node *root)
    {
        vector<int> ans;
        //base case
        if(root==NULL)
            return ans;
          
        ans.push_back(root->data);
        
        //for printing left node except leaf node.
        traverseLeft(root->left, ans);
    
        //for printing all leaf node
        traverseLeaf(root->left, ans);
        traverseLeaf(root->right, ans);
        
        //for printing right node except leaf node.
        traverseRight(root->right, ans);
        
        
        
        return ans;
    }
};


3.Vertical Traversal of Binary Tree


vector<int> verticalOrder(Node *root)
    {
        map<int, map<int,vector<int> > > nodes;
        queue<pair<Node* , pair<int, int> > > q;
    
        vector<int> ans;
        if(root== NULL)
            return ans;
        
        q.push(make_pair(root, make_pair(0,0)));
        
        while(!q.empty())
        {
            pair<Node* , pair<int, int>> temp = q.front();
            q.pop();
            Node* frontNode = temp.first;
            //hd -> Horizontal Distances
            int hd = temp.second.first;
            int level = temp.second.second;
            
            nodes[hd][level].push_back(frontNode->data);
            
            if(frontNode->left)
                q.push(make_pair(frontNode->left, make_pair(hd-1,level+1)));
            
            if(frontNode->right)
                q.push(make_pair(frontNode->right, make_pair(hd+1, level+1)));
                
        }
        for(auto i : nodes)
        {
            for(auto j : i.second)
            {
                for(auto k : j.second)
                {
                    ans.push_back(k);
                }
                
            }
        }
        
        
        return ans;
    }


4.Top View of Binary Tree


vector<int> topView(Node *root)
    {
       vector<int> ans;
       if(root == NULL )
            return ans;
        // hd, node->data
        map<int, int> topNode ;
        queue<pair<Node* , int>>q;
        // second is hd
        q.push(make_pair(root, 0));
        while(!q.empty())
        {
            pair<Node* , int> temp = q.front();
            q.pop();
            Node* frontNode = temp.first;
            int hd = temp.second;
            
            if(topNode.find(hd) == topNode.end())
            {
                topNode[hd] = frontNode->data;
            }
            
            if(frontNode->left)
                q.push(make_pair(frontNode->left, hd-1));
            if(frontNode->right)
                q.push(make_pair(frontNode->right, hd+1));
        }
        
        for(auto i : topNode)
        {
            ans.push_back(i.second);
        }
        
        return ans;
    }
    
  
  5.Bottom View of Binary Tree
  
  
  
  vector <int> bottomView(Node *root) {
        vector<int> ans;
       if(root == NULL )
            return ans;
        // hd, node->data
        map<int, int> topNode ;
        queue<pair<Node* , int>>q;
        // second is hd
        q.push(make_pair(root, 0));
        while(!q.empty())
        {
            pair<Node* , int> temp = q.front();
            q.pop();
            Node* frontNode = temp.first;
            int hd = temp.second;
            
            
            topNode[hd] = frontNode->data;
            
            
            if(frontNode->left)
                q.push(make_pair(frontNode->left, hd-1));
            if(frontNode->right)
                q.push(make_pair(frontNode->right, hd+1));
        }
        
        for(auto i : topNode)
        {
            ans.push_back(i.second);
        }
        
        return ans;
    }
    
    
    
    6.Left View of Binary Tree
    
    
    
    void solve(Node* root, vector<int> &ans, int level)
{
    if(root == NULL)
        return ;
    if(level == ans.size())
        ans.push_back(root->data);
        
    solve(root->left, ans, level+1);
    solve(root->right, ans, level+1);
}
vector<int> leftView(Node *root)
{
   vector<int> ans;
   solve(root, ans, 0);
   return ans;
}



7.Right View of Binary Tree



class Solution
{
    private:
    void solve(Node* root, vector<int> &ans, int level)
    {
        if(root == NULL)
            return ;
        if(level == ans.size())
            ans.push_back(root->data);
            
        solve(root->right, ans, level+1);
        solve(root->left, ans, level+1);
    }
    public:
    //Function to return list containing elements of right view of binary tree.
    vector<int> rightView(Node *root)
    {
       vector<int> ans;
        solve(root, ans, 0);
        return ans;
    }
};
   


HARD 7. Burning Tree



class Solution {
    private:
    //create node to parent mapping
    // return target node 
    Node* createParentMapping(Node* root, int target, map<Node*, Node*> &nodeToParent)
    {
        Node* ans = NULL;
        queue<Node* > q;
        q.push(root);
        nodeToParent[root] = NULL;
        while(!q.empty())
        {
            Node* front = q.front();
            q.pop();
            if(front->data == target)
                ans = front;
            if(front->left)
            {
                nodeToParent[front->left] = front;
                q.push(front->left);
            }
            if(front->right)
            {
                nodeToParent[front->right] = front;
                q.push(front->right);
            }
        }
        return ans;
        
    }
    
    int burnTree(Node* root, map<Node* , Node*> &nodeToParent)
    {
        map<Node*, bool> visited;
        queue<Node*> q;
        q.push(root);
        visited[root] = true;
        int ans = 0;
        while(!q.empty())
        {
            bool flag = 0;
            int size = q.size();
            for(int i = 0 ; i< size; i++)
            {
                Node* front = q.front();
                q.pop();
                if(front->left && !visited[front->left]){
                    flag = 1;
                    q.push(front->left);
                    visited[front->left] = 1;
                }
                
                if(front->right && !visited[front->right]){
                    flag = 1;
                    q.push(front->right);
                    visited[front->right]=1;
                }
                
                if(nodeToParent[front] && !visited[nodeToParent[front]]){
                    flag = 1;
                    q.push(nodeToParent[front]);
                    visited[nodeToParent[front]] = 1;
                }
            }
            if(flag == 1)
                ans++;
            
        }
        return ans;
    }
  public:
    int minTime(Node* root, int target) 
    {
        map<Node* , Node* > nodeToParent;
        Node* targetNode = createParentMapping(root, target, nodeToParent);
        int ans = burnTree(targetNode, nodeToParent);
        return ans;
    }
};
